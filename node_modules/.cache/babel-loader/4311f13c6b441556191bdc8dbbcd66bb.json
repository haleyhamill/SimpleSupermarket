{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport default function useFetch(baseUrl) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n\n  function get(url) {\n    return new Promise((resolve, reject) => {\n      fetch(baseUrl + url).then(response => response.json()).then(data => {\n        if (!data) {\n          setLoading(false);\n          return reject(data);\n        }\n\n        setLoading(false);\n        resolve(data);\n      }).catch(error => {\n        setLoading(false);\n        reject(error);\n      });\n    });\n  }\n\n  function post(url, body) {\n    return new Promise((resolve, reject) => {\n      fetch(baseUrl + url, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      }).then(response => response.json()).then(data => {\n        if (!data) {\n          setLoading(false);\n          return reject(data);\n        }\n\n        setLoading(false);\n        resolve(data);\n      }).catch(error => {\n        setLoading(false);\n        reject(error);\n      });\n    });\n  }\n\n  return {\n    get,\n    post,\n    loading\n  };\n}\n\n_s(useFetch, \"awoWwSKBZAy48DVUNX9vIFbdsbI=\");\n\n;","map":{"version":3,"sources":["/Users/haleyhamill/Desktop/github/webdev/supermarketAppReact/supermarket/src/useFetch.js"],"names":["useState","useFetch","baseUrl","loading","setLoading","get","url","Promise","resolve","reject","fetch","then","response","json","data","catch","error","post","body","method","headers","JSON","stringify"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAAA;;AACxC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;;AAEA,WAASK,GAAT,CAAaC,GAAb,EAAkB;AAChB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,KAAK,CAACR,OAAO,GAAGI,GAAX,CAAL,CACGK,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZ,YAAI,CAACA,IAAL,EAAW;AACTV,UAAAA,UAAU,CAAC,KAAD,CAAV;AACA,iBAAOK,MAAM,CAACK,IAAD,CAAb;AACD;;AACDV,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAI,QAAAA,OAAO,CAACM,IAAD,CAAP;AACD,OATH,EAUGC,KAVH,CAUSC,KAAK,IAAI;AACdZ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAK,QAAAA,MAAM,CAACO,KAAD,CAAN;AACD,OAbH;AAcD,KAfM,CAAP;AAgBD;;AAED,WAASC,IAAT,CAAcX,GAAd,EAAmBY,IAAnB,EAAyB;AACvB,WAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,KAAK,CAACR,OAAO,GAAGI,GAAX,EAAgB;AACnBa,QAAAA,MAAM,EAAE,MADW;AAEnBC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFU;AAKnBF,QAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALa,OAAhB,CAAL,CAOGP,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPpB,EAQGF,IARH,CAQQG,IAAI,IAAI;AACZ,YAAI,CAACA,IAAL,EAAW;AACTV,UAAAA,UAAU,CAAC,KAAD,CAAV;AACA,iBAAOK,MAAM,CAACK,IAAD,CAAb;AACD;;AACDV,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAI,QAAAA,OAAO,CAACM,IAAD,CAAP;AACD,OAfH,EAgBGC,KAhBH,CAgBSC,KAAK,IAAI;AACdZ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAK,QAAAA,MAAM,CAACO,KAAD,CAAN;AACD,OAnBH;AAoBD,KArBM,CAAP;AAsBD;;AAED,SAAO;AAAEX,IAAAA,GAAF;AAAOY,IAAAA,IAAP;AAAad,IAAAA;AAAb,GAAP;AACD;;GAhDuBF,Q;;AAgDvB","sourcesContent":["import { useState } from \"react\";\n\nexport default function useFetch(baseUrl) {\n  const [loading, setLoading] = useState(true);\n\n  function get(url) {\n    return new Promise((resolve, reject) => {\n      fetch(baseUrl + url)\n        .then(response => response.json())\n        .then(data => {\n          if (!data) {\n            setLoading(false);\n            return reject(data);\n          }\n          setLoading(false);\n          resolve(data);\n        })\n        .catch(error => {\n          setLoading(false);\n          reject(error);\n        });\n    });\n  }\n\n  function post(url, body) {\n    return new Promise((resolve, reject) => {\n      fetch(baseUrl + url, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body)\n      })\n        .then(response => response.json())\n        .then(data => {\n          if (!data) {\n            setLoading(false);\n            return reject(data);\n          }\n          setLoading(false);\n          resolve(data);\n        })\n        .catch(error => {\n          setLoading(false);\n          reject(error);\n        });\n    });\n  }\n\n  return { get, post, loading };\n};\n"]},"metadata":{},"sourceType":"module"}